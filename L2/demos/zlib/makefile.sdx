#
# Copyright 2019 Xilinx, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# ------------------------------------------------------------
#						Help

help::
	$(ECHO) "Makefile Usage:"
	$(ECHO) "  make all TARGET=<sw_emu/hw_emu/hw> DEVICE=<FPGA platform>"
	$(ECHO) "      Command to generate the design for specified Target and Device."
	$(ECHO) ""
	$(ECHO) "  make run TARGET=<sw_emu/hw_emu/hw> DEVICE=<FPGA platform>"
	$(ECHO) "      Command to run application in emulation."
	$(ECHO) ""
	$(ECHO) "  make clean "
	$(ECHO) "      Command to remove the generated non-hardware files."
	$(ECHO) ""
	$(ECHO) "  make cleanall"
	$(ECHO) "      Command to remove all the generated files."
	$(ECHO) ""

# ------------------------------------------------------------
#						Build Environment Setup

include ./utils.mk
include ./config.mk

#check environment setup
ifndef XILINX_SDX
  $(error XILINX_SDX must be set by SDx\'s setting64.sh)
endif
ifndef XILINX_VIVADO
  $(error XILINX_VIVADO should have been set by SDx\'s setting64.sh)
endif
ifndef XILINX_XRT
  $(error XILINX_XRT must be set after 2018.3 release.)
endif
ifndef PLATFORM_REPO_PATHS
  $(error PLATFORM_REPO_PATHS must be defined.)
endif

# sw_emu, hw_emu, hw
TARGET ?= sw_emu
ifeq ($(filter $(TARGET),sw_emu hw_emu hw),)
$(error TARGET is not sw_emu, hw_emu or hw)
endif

# Target device
DEVICE ?= xilinx_u200_qdma_201910_1

ifneq (,$(wildcard $(DEVICE)))
# Use DEVICE as a file path
XPLATFORM := $(DEVICE)
else
# Use DEVICE as a file name pattern
# Default location of platforms.
ifndef PLATFORM_REPO_PATHS
ifneq (,$(wildcard /opt/xilinx/platforms/*))
PLATFORM_REPO_PATHS := /opt/xilinx/platforms
endif
endif
# Match the name
DEVICE_L := $(shell echo $(DEVICE) | tr A-Z a-z)
XPLATFORM_PATHS := $(subst :, ,$(PLATFORM_REPO_PATHS)) $(XILINX_SDX)/platforms
XPLATFORMS := $(foreach p, $(XPLATFORM_PATHS), $(wildcard $(p)/*/*.xpfm))
XPLATFORM := $(strip $(foreach p, $(XPLATFORMS), $(shell echo $(p) | awk '$$1 ~ /$(DEVICE_L)/')))
ifeq (,$(XPLATFORM))
define MSG_PLATFORM
No platform matched pattern '$(DEVICE)'.
Avaialble platforms are: $(XPLATFORMS)
To add more platforms, set the PLATFORM_REPO_PATHS variable.
endef
$(error $(MSG_PLATFORM))
endif
ifneq (,$(word 2,$(XPLATFORM)))
define MSG_DEVICE
More than one platform matched: $(XPLATFORM)
Please set DEVICE variable to specify a device. For example: DEVICE='u200.*xdma'
endef
$(error $(MSG_DEVICE))
endif
endif

XDEVICE := $(basename $(notdir $(XPLATFORM)))

# Target platform
$(info XPLATFORM=$(XPLATFORM))


# ------------------------------------------------------------
#						Directory Setup

XF_PROJ_ROOT ?= $(CUR_DIR)/../../..
MK_PATH := $(abspath $(lastword $(MAKEFILE_LIST)))
CUR_DIR := $(patsubst %/,%,$(dir $(MK_PATH)))

BUILD_DIR := $(CUR_DIR)/build
TEMP_DIR := $(CUR_DIR)/_x_temp.$(TARGET).$(XDEVICE)

XFLIB_DIR := $(shell readlink -f $(XF_PROJ_ROOT))


# ------------------------------------------------------------
#                      kernel setup
SINGLE_XCLBIN:=true

KSRC_DIR = $(XFLIB_DIR)/L2/src/hw

VPP = $(XILINX_SDX)/bin/xocc

# HLS src files
HLS_SRC_DIR = $(XFLIB_DIR)/L1/include/hw

# Compilation flags
VPP_FLAGS = -I$(HLS_SRC_DIR) \
			 -I$(KSRC_DIR) \
			 -I$(XFLIB_DIR)/L2/include/hw
VPP_FLAGS += -t $(TARGET) --platform $(XPLATFORM) --save-temps
VPP_FLAGS += --xp param:compiler.enableAutoPipelining=false \
			  -DPARALLEL_BLOCK=$(PARALLEL_BLOCK)
VPP_FLAGS += --xp param:compiler.userPostSysLinkTcl=$(CURDIR)/userPostSysLinkgzip.tcl

VPP_DIRS = --temp_dir $(TEMP_DIR)/_x.$(TARGET) \
			--report_dir $(CUR_DIR)/reports/_x.$(TARGET)

# Linking flags
VPP_LINK_FLAGS = --optimize 2 --jobs 8 \
				  --xp vivado_param:project.writeIntermediateCheckpoints=1

VPP_LINK_DIRS = --temp_dir $(TEMP_DIR)/_build.$(TARGET)\
				 --report_dir $(CUR_DIR)/reports/_build.$(TARGET)/

XCLBIN_FILE_C = $(BUILD_DIR)/zlib_compress.xclbin
XCLBIN_FILE_D = $(BUILD_DIR)/zlib_decompress.xclbin
XCLBIN_FILE_S = $(BUILD_DIR)/zlib_compress_decompress.xclbin

ifeq ($(strip $(SINGLE_XCLBIN)),false)
XCLBIN_FILE_S = $(XCLBIN_FILE_C) $(XCLBIN_FILE_D)
endif

XO_FILES_C = $(TEMP_DIR)/xf_compress_lz77.xo \
		   	 $(TEMP_DIR)/xf_huffman.xo \
		  	 $(TEMP_DIR)/xf_treegen.xo
		  	 
XO_FILES_D = $(TEMP_DIR)/xf_zlib_decompress.xo

COMPRESS_KERNEL_SRCS = $(KSRC_DIR)/xil_lz77_compress_kernel.cpp
HUFFMAN_KERNEL_SRCS = $(KSRC_DIR)/xil_huffman_kernel.cpp
TREEGEN_KERNEL_SRCS = $(KSRC_DIR)/xil_treegen_kernel.cpp
DECOMPRESS_KERNEL_SRCS = $(KSRC_DIR)/xil_zlib_decompress_kernel.cpp

COMPRESS_KERNEL_NAME = xilLz77Compress
HUFFMAN_KERNEL_NAME = xilHuffmanKernel
TREEGEN_KERNEL_NAME = xilTreegenKernel
DECOMPRESS_KERNEL_NAME = xilDecompressZlib

XO_FILES_C = $(TEMP_DIR)/xf_compress_lz77.xo \
		   	 $(TEMP_DIR)/xf_huffman.xo \
		  	 $(TEMP_DIR)/xf_treegen.xo
		  	 
XO_FILES_D = $(TEMP_DIR)/xf_zlib_decompress.xo

COMPRESS_KERNEL_SRCS = $(KSRC_DIR)/xil_lz77_compress_kernel.cpp
HUFFMAN_KERNEL_SRCS = $(KSRC_DIR)/xil_huffman_kernel.cpp
TREEGEN_KERNEL_SRCS = $(KSRC_DIR)/xil_treegen_kernel.cpp
DECOMPRESS_KERNEL_SRCS = $(KSRC_DIR)/xil_zlib_decompress_kernel.cpp

COMPRESS_KERNEL_NAME = xilLz77Compress
HUFFMAN_KERNEL_NAME = xilHuffmanKernel
TREEGEN_KERNEL_NAME = xilTreegenKernel
DECOMPRESS_KERNEL_NAME = xilDecompressZlib

KERNELS += $(COMPRESS_KERNEL_NAME) $(HUFFMAN_KERNEL_NAME) $(TREEGEN_KERNEL_NAME) $(DECOMPRESS_KERNEL_NAME)

# ------------------------------------------------------------
#                      kernel rules

# Building kernel
$(TEMP_DIR)/xf_compress_lz77.xo: $(COMPRESS_KERNEL_SRCS) $(HLS_SRC_DIR)
	@echo -e "----\nCompiling compression kernel..."
	mkdir -p $(TEMP_DIR)
	$(VPP) $(VPP_FLAGS) $(VPP_DIRS) -c -k $(COMPRESS_KERNEL_NAME) \
		-DC_COMPUTE_UNIT=1 -I'$(<D)' -o'$@' '$<'

$(TEMP_DIR)/xf_huffman.xo: $(HUFFMAN_KERNEL_SRCS) $(HLS_SRC_DIR)
	@echo -e "----\nCompiling huffman kernel $*..."
	mkdir -p $(TEMP_DIR)
	$(VPP) $(VPP_FLAGS) $(VPP_DIRS) -c -k $(HUFFMAN_KERNEL_NAME) \
		-DH_COMPUTE_UNIT=1 -I'$(<D)' -o'$@' '$<'

$(TEMP_DIR)/xf_treegen.xo: $(TREEGEN_KERNEL_SRCS) $(HLS_SRC_DIR)
	@echo -e "----\nCompiling treegen kernel $*..."
	mkdir -p $(TEMP_DIR)
	$(VPP) $(VPP_FLAGS) $(VPP_DIRS) -c -k $(TREEGEN_KERNEL_NAME) \
		-DT_COMPUTE_UNIT=1 -I'$(<D)' -o'$@' '$<'

$(TEMP_DIR)/xf_zlib_decompress.xo: $(DECOMPRESS_KERNEL_SRCS) $(HLS_SRC_DIR)
	@echo -e "----\nCompiling decompression kernel $*..."
	mkdir -p $(TEMP_DIR)
	$(VPP) $(VPP_FLAGS) $(VPP_DIRS) -c -k $(DECOMPRESS_KERNEL_NAME) \
	    -DD_COMPUTE_UNIT=1 -I'$(<D)' -o'$@' '$<'


# xclbin Binary creation
$(XCLBIN_FILE_C): $(XO_FILES_C)
	mkdir -p $(BUILD_DIR)
	$(VPP)  -o'$@' $(VPP_FLAGS) $(VPP_LINK_FLAGS) $(C_VPP_LINK_FLAGS) $(VPP_LINK_DIRS) -l $(+)

$(XCLBIN_FILE_D): $(XO_FILES_D)
	mkdir -p $(BUILD_DIR)
	$(VPP)  -o'$@' $(VPP_FLAGS) $(VPP_LINK_FLAGS) $(D_VPP_LINK_FLAGS) $(VPP_LINK_DIRS) -l $(+)

$(XCLBIN_FILE_S): $(XO_FILES_C) $(XO_FILES_D)
	mkdir -p $(BUILD_DIR)
	$(VPP) $(VPP_FLAGS) $(VPP_LINK_FLAGS) $(VPP_LINK_DIRS)/Decompress/ -l -o'$@' $(+)

# ------------------------------------------------------------
#                       host setup

CXX := $(XILINX_SDX)/bin/xcpp
HOST_EXE := xil_zlib
#EXE_EXT = exe

CXXFLAGS +=-I$(CUR_DIR)/src/
CXXFLAGS +=-I$(XFLIB_DIR)/L2/include/hw/
CXXFLAGS +=-I$(XILINX_XRT)/include/
CXXFLAGS +=-I$(XFLIB_DIR)/common/libs/xcl2/
CXXFLAGS +=-I$(XFLIB_DIR)/common/libs/cmdparser/
CXXFLAGS +=-I$(XFLIB_DIR)/common/libs/logger/
CXXFLAGS +=-I$(XFLIB_DIR)/common/thirdParty/xxhash/

#Host and Common sources
HOST_SRCS += $(CUR_DIR)/src/host.cpp
HOST_SRCS += $(CUR_DIR)/src/xil_zlib.cpp
HOST_SRCS += $(XFLIB_DIR)/common/libs/xcl2/xcl2.cpp
HOST_SRCS += $(XFLIB_DIR)/common/libs/cmdparser/cmdlineparser.cpp
HOST_SRCS += $(XFLIB_DIR)/common/libs/logger/logger.cpp
HOST_SRCS += $(XFLIB_DIR)/common/thirdParty/xxhash/xxhash.c

CXXFLAGS += -fmessage-length=0 -std=c++14 -O0 \
		-DXDEVICE=$(XDEVICE) \
	    -Wall -Wno-unknown-pragmas -Wno-unused-label -pthread

LDFLAGS += -L$(XILINX_XRT)/lib/ -lOpenCL -pthread
LDFLAGS += -lrt -Wno-unused-label -Wno-narrowing -std=c++14 -DVERBOSE -lstdc++
#LDFLAGS +=  -std=c++0x

EXE_FILE = $(BUILD_DIR)/$(HOST_EXE)


# ------------------------------------------------------------
#                       host rules

$(EXE_FILE): $(HOST_SRCS)
	@echo -e "----\nCompiling host $(notdir $@)..."
	mkdir -p $(BUILD_DIR)
	$(CXX) -o $@ $^ $(CXXFLAGS) $(LDFLAGS) -g


# ------------------------------------------------------------
#                      build rules

.PHONY: all help host xclbin cleanh cleank cleanall clean

all: host xclbin

host: $(EXE_FILE)

xclbin: $(XCLBIN_FILE_S)

cleank:
	rm -f _x_temp.*/*.xo
	rm -f $(BUILD_DIR)/*.xclbin
	rm -rf _x_temp.*/_x.* _x_temp.*/.Xil _x_temp.*/sdaccel_profile_summary.*
	rm -rf _x_temp.*/dltmp* _x_temp.*/kernel_info.dat _x_temp.*/*.log
	rm -rf _x_temp*
	
cleanh:
	rm -rf $(EXE_FILE)
	-$(RMDIR) $(EXE_FILE)
	-$(RMDIR) sdaccel_* TempConfig system_estimate.xtxt *.rpt .run/
	-$(RMDIR) src/*.ll _xocc_* .Xil dltmp* xmltmp* *.log *.jou *.wcfg *.wdb

cleanall: cleanh cleank
	rm -rf $(BUILD_DIR)
	-$(RMDIR) _x_temp.* $(CUR_DIR)/reports *.csv
	-$(RMDIR) $(XFLIB_DIR)/common/benchmark/cantrbry/*.xe2xd* $(XFLIB_DIR)/common/benchmark/silesia/*.xe2xd*

clean: cleanh


# ------------------------------------------------------------
#                      simulation run

$(BUILD_DIR)/emconfig.json :
		emconfigutil --platform $(XPLATFORM) --od $(BUILD_DIR)
ifeq ($(strip $(SINGLE_XCLBIN)),true)
HOST_ARGS = -sx $(XCLBIN_FILE_S)
else
HOST_ARGS = -cx $(XCLBIN_FILE_C) -dx $(XCLBIN_FILE_D)
endif

HOST_ARGS += -l $(XFLIB_DIR)/common/test.list

ifeq ($(TARGET),sw_emu)
  EMU_MODE = export XCL_EMULATION_MODE=sw_emu
  EMU_CONFIG = $(BUILD_DIR)/emconfig.json
else ifeq ($(TARGET),hw_emu)
  EMU_MODE = export XCL_EMULATION_MODE=hw_emu
  EMU_CONFIG = $(BUILD_DIR)/emconfig.json
else ifeq ($(TARGET),hw)
  EMU_MODE = echo "TARGET=hw"
  EMU_CONFIG =
endif


run: host xclbin $(EMU_CONFIG) $(DAT_STAMP)
	$(EMU_MODE); \
	$(EXE_FILE) $(HOST_ARGS)

check: run

.PHONY: build
build: xclbin host
